/**
 * Media server interface for signaling server
 *
 * @author Daniil Makeev / daniil-makeev@yandex.ru
 * @package MediaServer
 */

var config = require("getconfig");
var Janus = require("./janus.js");
var Log = require("./log.js");

class MediaServer {
  /*
   * Choose media server to use
   *
   */
  constructor() {
    var self = this;
    //self.use = 'Kurento';
    self.use = "Janus";
    switch (self.use) {
      case "Kurento":
        self.server = Kurento;
        break;
      case "Janus":
        self.server = Janus;
        break;
      default:
        Log.loggingIntoFile("No media server choosen  \r\n");
    }
  }

  /**
   * Init it
   *
   */
  init() {
    var self = this;
    self.server.init();
  }

  /**
   * Publisher starts streaming
   *
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param data         array       Stream creation params - offer, if video and audio required
   * @param callback     function    Callback function
   * @return bool
   */
  startStream(streamObject, userObject, data, callback) {
    var self = this;
    self.server.joinStream(
      streamObject,
      userObject,
      false,
      data,
      (error, sdpAnswer) => {
        callback(error, sdpAnswer);
      }
    );
  }

  /**
   * Publisher finishes streaming
   *
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param callback     function    Callback function
   * @return bool
   */
  finishStream(streamObject, userObject, callback) {
    var self = this;
    self.server.finishStream(streamObject, userObject, callback);
  }

  /**
   * Subscriber joins the stream
   *
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param publisherId  integer     ID of publisher to watch - for subscriber. If no publisherId set - user is publisher
   * @param sdpOffer     string      SDP Offer text
   * @param callback     function    Callback function
   * @return bool
   */
  joinStream(streamObject, userObject, publisherId, sdpOffer, callback) {
    var self = this;
    self.server.joinStream(
      streamObject,
      userObject,
      publisherId,
      sdpOffer,
      (error, sdpAnswer) => {
        callback(error, sdpAnswer);
      }
    );
  }

  /**
   * Subscriber leaves the stream
   *
   * @param room         string      Room slug
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param publisherId  integer     ID of publisher to watch - for subscriber. If no publisherId set - user is publisher
   * @param callback     function    Callback function
   * @return bool
   */
  leaveStream(streamObject, userObject, publiserId, callback) {
    var self = this;
    self.server.leaveStream(streamObject, userObject, publiserId, callback);
  }

  /**
   * Add ICE Candidate to Janus
   *
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param publisherId  integer     ID of publisher to watch - for subscriber. If no publisherId set - user is publisher
   * @param candidate    string      ICE Candidate
   * @param callback     function    Callback function
   * @return bool
   */
  addCandidate(streamObject, userObject, publisherId, candidate) {
    var self = this;
    return self.server.addCandidate(
      streamObject,
      userObject,
      publisherId,
      candidate
    );
  }

  /**
   * Event for new ICE candidate, generated by Janus
   *
   * @param userObject   object      User object
   * @param publisherId  integer     ID of publisher to watch - for subscriber. If no publisherId set - user is publisher
   * @param callback     function    Callback function
   * @return bool
   */
  onCandidate(userObject, publisherId, callback) {
    var self = this;
    return self.server.onCandidate(userObject, publisherId, callback);
  }

  /**
   * Add sdpAnswer to Janus
   *
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param publisherId  integer     ID of publisher to watch - for subscriber. If no publisherId set - user is publisher
   * @param sdpAnswer    string      sdp Answer
   * @return bool
   */
  addAnswer(streamObject, userObject, publisherId, sdpAnswer) {
    var self = this;
    return self.server.addAnswer(
      streamObject,
      userObject,
      publisherId,
      sdpAnswer
    );
  }

  /**
   * Event on change publisher list
   *
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param callback     function    Callback function
   * @return bool
   */
  onChangePublishers(streamObject, userObject, callback) {
    var self = this;
    return self.server.onChangePublishers(streamObject, userObject, callback);
  }

  /**
   * Get actual publisher list
   *
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param callback     function    Callback function
   * @return bool
   */
  getPublishers(streamObject, userObject, callback) {
    var self = this;
    return self.server.getPublishersExt(streamObject, userObject, callback);
  }

  /**
   * Toggle media â€” enable or disable video and audio streams
   *
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param muted        bool        If stream must be muted
   * @param callback     function    Callback function
   * @return bool
   */
  mediaToggle(streamObject, userObject, data, callback) {
    var self = this;
    return self.server.mediaToggle(streamObject, userObject, data, callback);
  }

  /**
   * Event fired when user connected to Janus
   *
   * @param streamObject object      Stream object
   * @param userObject   object      User object
   * @param callback     function    Callback function
   * @return bool
   */
  onConnected(streamObject, userObject, callback) {
    var self = this;
    return self.server.onConnected(streamObject, userObject, callback);
  }
}

module.exports = new MediaServer();
